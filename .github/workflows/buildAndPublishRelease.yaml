name: Build and publish release

on:
  push:
    branches: [main]
    paths: ['app/build.gradle.kts']

jobs:
  build-and-publish-release:
    runs-on: ubuntu-latest
    env:
      GH_USERNAME: ${{ secrets.GH_USERNAME }}
      GH_ACCESS_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
      RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
      RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
      RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
      RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Extract version information
        id: version_info
        run: |
          PREV=$(git rev-parse HEAD^)
          OLD_VERSION_CODE=$(git show $PREV:app/build.gradle.kts | grep 'versionCode' | sed -E 's/.*versionCode\s*=\s*([0-9]+).*/\1/')
          VERSION_CODE=$(grep 'versionCode' app/build.gradle.kts | sed -E 's/.*versionCode\s*=\s*([0-9]+).*/\1/')
          VERSION_NAME=$(grep 'versionName' app/build.gradle.kts | sed -E 's/.*versionName\s*=\s*"([^"]+)".*/\1/')
          
          # Set outputs
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "changed=$([ "$OLD_VERSION_CODE" != "$VERSION_CODE" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          
          # Display info
          echo "Version: $VERSION_NAME (code: $VERSION_CODE, changed: $([ "$OLD_VERSION_CODE" != "$VERSION_CODE" ] && echo "true" || echo "false"))"

      # All subsequent steps only run if version code has changed
      - name: Prepare for build
        if: steps.version_info.outputs.changed == 'true'
        run: |
          chmod +x ./gradlew
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > keystore.jks

      - name: Build APK
        if: steps.version_info.outputs.changed == 'true'
        run: |
          ./gradlew :app:assembleRelease
          mkdir -p app/release
          cp -v -r app/build/outputs/apk/release app

      - name: Commit artifacts
        if: steps.version_info.outputs.changed == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add app/release/*
          git commit -m "Update APK to v${{ steps.version_info.outputs.version_name }}" || echo "No changes to commit"
          git push

      - name: Create GitHub Release
        if: steps.version_info.outputs.changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_info.outputs.version_name }}
          files: app/build/outputs/apk/release/app-release.apk
          generate_release_notes: true

      - name: Prepare Play Store release
        if: steps.version_info.outputs.changed == 'true'
        run: |
          ./gradlew bundleRelease
          mkdir -p app/build/outputs/whatsNew
          echo "Automated Upload" > app/build/outputs/whatsNew/whatsnew-en-US
          echo "Automatischer Upload" > app/build/outputs/whatsNew/whatsnew-de-DE

      - name: Publish to Play Store
        if: steps.version_info.outputs.changed == 'true'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: ${{ secrets.PACKAGE_NAME }}
          track: internal
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          mappingFile: app/build/outputs/mapping/release/mapping.txt
          debugSymbols: app/build/intermediates/merged_native_libs/release/mergeReleaseNativeLibs/out/lib
          whatsNewDirectory: app/build/outputs/whatsNew
          releaseName: ${{ steps.version_info.outputs.version_code }} (${{ steps.version_info.outputs.version_name }})
